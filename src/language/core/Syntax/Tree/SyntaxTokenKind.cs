namespace Vezel.Celerity.Language.Syntax.Tree;

public enum SyntaxTokenKind
{
    Missing, // Synthesized in LanguageParser for missing tokens.
    EndOfInput, // Synthesized in LanguageLexer after all input has been consumed.
    Unrecognized, // Produced by LanguageLexer but turned into SyntaxTriviaKind.SkippedToken in LanguageParser.
    BitwiseOperator,
    ShiftOperator,
    MultiplicativeOperator,
    AdditiveOperator,
    Equals,
    EqualsEquals,
    ExclamationEquals,
    CloseAngle,
    CloseAngleEquals,
    OpenAngle,
    OpenAngleEquals,
    Dot,
    DotDot,
    Comma,
    Colon,
    ColonColon,
    Semicolon,
    MinusCloseAngle,
    At,
    Hash,
    Question,
    OpenParen,
    CloseParen,
    OpenBracket,
    CloseBracket,
    OpenBrace,
    CloseBrace,
    AndKeyword,
    AsKeyword,
    AssertKeyword,
    BreakKeyword,
    CatchKeyword,
    CondKeyword,
    ConstKeyword,
    DeferKeyword,
    ElseKeyword,
    ErrKeyword,
    ExtKeyword,
    FnKeyword,
    ForKeyword,
    IfKeyword,
    InKeyword,
    LetKeyword,
    MatchKeyword,
    ModKeyword,
    MutKeyword,
    NextKeyword,
    NotKeyword,
    OpaqueKeyword,
    OrKeyword,
    PubKeyword,
    RaiseKeyword,
    RecKeyword,
    RecvKeyword,
    RetKeyword,
    TailKeyword,
    TestKeyword,
    ThisKeyword,
    TryKeyword,
    TypeKeyword,
    UseKeyword,
    WhileKeyword,
    WithKeyword,
    AgentKeyword,
    AnyKeyword,
    AtomKeyword,
    BoolKeyword,
    HandleKeyword,
    IntKeyword,
    NoneKeyword,
    RealKeyword,
    RefKeyword,
    StrKeyword,
    FriendKeyword,
    MacroKeyword,
    MetaKeyword,
    QuoteKeyword,
    UnquoteKeyword,
    YieldKeyword,
    UpperIdentifier,
    LowerIdentifier,
    DiscardIdentifier,
    NilLiteral,
    BooleanLiteral,
    IntegerLiteral,
    RealLiteral,
    AtomLiteral,
    StringLiteral,
}
